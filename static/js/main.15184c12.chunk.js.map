{"version":3,"sources":["Context.tsx","Todo.tsx","styles.tsx","TodoList.tsx","LeftPane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoContext","createContext","TodoContextProvider","_ref","children","value","_useReducer","useReducer","prevState","action","type","todoListInfo","concat","Object","toConsumableArray","Array","_useReducer2","slicedToArray","todoListInfos","todoListInfosDispatch","_useReducer3","todo","filter","todoId","map","_useReducer4","todoList","todoListDispatch","react_default","a","createElement","Provider","objectSpread","selectedListInfo","Todo","useContext","todoListId","isDone","description","color","onClick","SubTitle","styled","div","_templateObject","TextInput","input","_templateObject2","ListTitle","h1","TodoList_templateObject","TodoList","_useContext","_useState","useState","String","_useState2","todoInput","setTodoInput","Fragment","listName","onSubmit","e","preventDefault","length","Date","getTime","placeholder","onChange","target","className","src_Todo","ListWrapper","LeftPane_templateObject","UserTitle","h2","LeftPane_templateObject2","ListButtonWrapper","_templateObject3","ListColor","_templateObject4","ListButton","button","_templateObject5","props","isSelected","LeftPane","setSelectedListInfo","listNameInput","setListName","_ref2","key","id","name","_ref3","currentTarget","Number","Container","App_templateObject","LeftPaneWrapper","App_templateObject2","RightPaneWrapper","App_templateObject3","App","Context_TodoContextProvider","src_LeftPane","src_TodoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.15184c12.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport { TodoListType, TodoType } from './types';\n\n/*\n  Component Role(s)\n  - Stores to-dos\n  - Adds and modifies a to-do\n*/\n\nexport interface TodoCtxtType {\n  todoListInfos: TodoListType[],\n  todoListInfosDispatch: Function,\n  todoList: TodoType[],\n  todoListDispatch: Function\n  selectedListInfo: TodoListType | null,\n}\n\nexport const TodoContext = createContext<TodoCtxtType>({} as TodoCtxtType);\n\nexport const TodoContextProvider: React.FC<{ value?: Object }> = ({ children, value }) => {\n  const [todoListInfos, todoListInfosDispatch] = useReducer((\n    prevState: TodoListType[],\n    action: {\n      type: String,\n      todoListInfo: TodoListType\n    }\n  ) => {\n    switch(action.type) {\n      case 'add':\n        return action.todoListInfo ? [action.todoListInfo, ...prevState] : prevState;\n\n      default:\n        return prevState;\n    }\n  }, Array<TodoListType>());\n\n  const [todoList, todoListDispatch] = useReducer((\n    prevState: TodoType[],\n    action: {\n      type: 'add' | 'remove' | 'modify',\n      todo: TodoType\n    }\n  ) => {\n    switch(action.type) {\n      case 'add':\n        return action.todo ? [action.todo, ...prevState] : prevState;\n\n      case 'remove':\n        return action.todo ? (\n          prevState.filter( todo => todo.todoId !== action.todo.todoId )\n        ) : prevState;\n\n      case 'modify':\n        return action.todo ? (\n          prevState.map(\n            todo => todo.todoId === action.todo.todoId ? action.todo : todo\n          )\n        ) : prevState;\n\n      default:\n        return prevState;\n    }\n  }, Array<TodoType>());\n\n  return (\n    <TodoContext.Provider value={{\n      todoListInfos, todoListInfosDispatch,\n      todoList, todoListDispatch,\n      selectedListInfo: null,\n      ...value\n    }}>\n      {children}\n    </TodoContext.Provider>\n  );\n}","import React, { useContext } from 'react';\nimport { TodoType } from './types';\nimport { TodoContext } from './Context';\n\n/*\n  Component Role(s)\n  - Displays and modifies to-do\n*/\n\nconst Todo: React.FC<{ todo: TodoType }> = ({ todo }) => {\n  const { todoListDispatch } = useContext(TodoContext);\n  \n  const { todoId, todoListId, isDone, description } = todo;\n\n  return (\n    <div>\n      <button\n        color={isDone ? 'green' : 'grey'}\n        onClick={\n          () => todoListDispatch({\n            type: 'modify',\n            todo: {\n              description,\n              todoId,\n              todoListId,\n              isDone: !isDone,\n            }\n          })\n        }\n      >\n        Mark as done\n      </button>\n      <button\n        onClick={ () => todoListDispatch({ type: 'remove', todo }) }\n      >\n        Delete\n      </button>\n      <span>\n        {isDone ? <s>{description}</s> : description}\n      </span>\n    </div>\n  );\n}\n\nexport default Todo;","import styled from 'styled-components';\n\nexport const SubTitle = styled.div`\n  margin: 0;\n  padding: 10px 0;\n  border-bottom: 1px solid gray;\n  text-transform: uppercase;\n`;\n\nexport const TextInput = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 35px;\n  margin: 10px 0;\n  background: #F0F0F0;\n  padding: 11px 0 11px 11px;\n  font-size: 15px;\n  border-radius: 6px;\n  border: none;\n`;","import React, { useState, useContext } from 'react';\nimport Todo from './Todo';\nimport styled from 'styled-components';\nimport { SubTitle, TextInput } from './styles';\nimport { TodoContext } from './Context';\n\n/*\n  Component Role(s)\n  - Displays list of to-dos\n*/\n\nconst TodoList: React.FC = () => {\n  const { todoList, todoListDispatch, selectedListInfo } = useContext(TodoContext);\n\n  const [todoInput, setTodoInput] = useState(String);\n\n  const handleOnSubmit = (e: { preventDefault: Function }) => {\n    e.preventDefault();\n\n    if (todoInput.length !== 0) {\n      selectedListInfo && todoListDispatch({\n        type: 'add',\n        todo: {\n          description: todoInput,\n          isDone: false,\n          todoId: new Date().getTime(),\n          todoListId: selectedListInfo.todoListId\n        }\n      });\n    }\n\n    setTodoInput('');\n  }\n\n  return selectedListInfo && (\n    <>\n      <ListTitle>{selectedListInfo.listName}</ListTitle>\n      <form onSubmit={handleOnSubmit}>\n        <TextInput\n          value={todoInput}\n          placeholder=\"Press Enter to add To-Do\"\n          onChange={ e => setTodoInput(e.target.value) }\n          className=\"text-input\"\n        />\n      </form>\n      <SubTitle>\n        To-Dos\n      </SubTitle>\n        <ul className=\"todo-lists\">\n        {\n          todoList.map(\n            todo => todo.todoListId === selectedListInfo.todoListId ? <Todo todo={todo} /> : null\n          )\n        }\n      </ul>\n    </>\n  );\n}\n\nconst ListTitle = styled.h1`\n  margin: 0;\n  padding: 0;\n  font-size: 33px;\n  font-weight: bold;\n`;\n\nexport default TodoList;","import React, { useState, useContext } from 'react';\nimport { TodoContext } from './Context';\nimport { SubTitle, TextInput } from './styles';\nimport styled from 'styled-components';\n\nconst LeftPane: React.FC<{ setSelectedListInfo: Function }> = ({ setSelectedListInfo }) => {\n  const { todoListInfos, todoListInfosDispatch, selectedListInfo } = useContext(TodoContext);\n\n  const [ listNameInput, setListName ] = useState(String);\n\n  const handleOnSubmit = (e: { preventDefault: Function }) => {\n    e.preventDefault();\n\n    if (listNameInput.length !== 0) {\n      todoListInfosDispatch({ \n        type: 'add',\n        todoListInfo: {\n          listName: listNameInput,\n          todoListId: new Date().getTime()\n        }\n      });\n    }\n\n    setListName('');\n  }\n\n  return (\n    <>\n      <UserTitle>Homer</UserTitle>\n      <SubTitle>Groups</SubTitle>\n      <form onSubmit={handleOnSubmit}>\n        <TextInput\n          value={listNameInput}\n          placeholder=\"Press Enter to create list\"\n          onChange={ e => setListName(e.target.value) }\n          className=\"text-input\"\n        />\n      </form>\n      <ListWrapper>\n        {\n          todoListInfos.map( ({ todoListId, listName }) => (\n            <ListButtonWrapper key={`${todoListId}`}>\n              <ListColor />\n              <ListButton\n                id={`${todoListId}`}\n                name={`${listName}`}\n                key={`${todoListId}`}\n                isSelected={selectedListInfo && selectedListInfo.todoListId === todoListId}\n                onClick={ ({ currentTarget }) => setSelectedListInfo({\n                  todoListId: Number(currentTarget.id),\n                  listName: currentTarget.name\n                }) }\n              >\n                {listName}\n              </ListButton>\n            </ListButtonWrapper>\n          ) )\n        }\n      </ListWrapper>\n    </>\n  );\n}\n\nconst ListWrapper = styled.div`\n  div + div {\n    margin-top: 3px;\n  }\n`;\n\nconst UserTitle = styled.h2`\n  margin: 0;\n  padding: 0;\n  font-size: 25px;\n  font-weight: bold;\n  color: #707070;\n`;\n\nconst ListButtonWrapper = styled.div`\n  div ~ button {\n    margin-left: 9px;\n  }\n\n  display: flex;\n  flex-direction: row;\n  height: 35px;\n`;\nconst ListColor = styled.div`\n  margin: auto 0;\n  background-color: #1B7CDD;\n  border: 3px solid #86BBF0;\n  width: 1.5em;\n  height: calc(1.5em - 2.7px);\n  border-radius: 50%;\n  box-sizing: border-box;\n`;\nconst ListButton = styled.button<{ isSelected: Boolean | null }>`\n  :hover {\n    background-color: #F5F5F5;\n  }\n\n  cursor: pointer;\n\n  overflow-x: hidden;\n  margin: 0;\n  box-sizing: border-box;\n  padding: 4px 8px;\n  background-color: ${ props => props.isSelected ? '#F0F0F0' : 'white' };\n  font-weight: ${ props => props.isSelected ? 'bold' : 'medium' };\n  border: none;\n  width: 100%;\n  height: 100%;\n  text-align: left;\n  font-size: 20px;\n  border-radius: 8px;\n`;\n\nexport default LeftPane;","import React, { useState } from 'react';\nimport TodoList from './TodoList';\nimport { TodoContextProvider } from './Context';\nimport { TodoListType } from './types';\nimport LeftPane from './LeftPane';\nimport styled from 'styled-components';\n\n/*\n  Component Role(s)\n  - Stores and modifies selectedListInfo\n  - Provides context\n*/\n\nconst App: React.FC = () => {\n  const [selectedListInfo, setSelectedListInfo] = useState<TodoListType | null>(null);\n\n  return (\n    <Container>\n      <TodoContextProvider value={{ selectedListInfo }}>\n        <LeftPaneWrapper>\n          <LeftPane setSelectedListInfo={setSelectedListInfo} />\n        </LeftPaneWrapper>\n        <RightPaneWrapper>\n          {\n            selectedListInfo ? (\n              <TodoList />\n            ) : '👈 Select a to-do list to begin with.'\n          }\n        </RightPaneWrapper>\n      </TodoContextProvider>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  padding-top: 10px;\n  max-width: 900px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst LeftPaneWrapper = styled.div`\n  width: 300px;\n  padding-right: 15px;\n`;\nconst RightPaneWrapper = styled.div`\n  width: 100%;\n  padding-left: 15px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}